<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com/</link>
    <description>Recent content on Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Apr 2025 11:30:52 -0700</lastBuildDate>
    
	<atom:link href="https://www.mikeperham.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sidekiq 8.0: Profiling</title>
      <link>https://www.mikeperham.com/2025/04/08/sidekiq-8.0-profiling/</link>
      <pubDate>Tue, 08 Apr 2025 11:30:52 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2025/04/08/sidekiq-8.0-profiling/</guid>
      <description>&lt;p&gt;Sidekiq is the most popular background job framework for Ruby applications and over the last 13 years, it has reached maturity in its feature set.
It has filled out much of its original design so adding a major new feature is a comparatively rare event these days.&lt;/p&gt;
&lt;p&gt;For years I&amp;rsquo;ve wanted Ruby to support thread-safe profiling.
Historically Ruby&amp;rsquo;s profiling APIs were process-global.
Data is collected for everything running in the process, making job profiling within a running Sidekiq process noisy and harder to read than ideal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sidekiq 8.0: Improvements to the Web UI</title>
      <link>https://www.mikeperham.com/2025/04/01/sidekiq-8.0-improvements-to-the-web-ui/</link>
      <pubDate>Tue, 01 Apr 2025 12:07:17 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2025/04/01/sidekiq-8.0-improvements-to-the-web-ui/</guid>
      <description>&lt;p&gt;Since its release last month, Sidekiq 8.0 has been very smooth with few reported issues.
I&amp;rsquo;ve been quite happy with the rollout and wanted to provide a little more context about the changes.
My goals for any user-friendly, high quality software is to reduce dependencies and keep it simple.
Sidekiq 8.0 brings a significant overhaul to its Web UI and these changes further those goals.&lt;/p&gt;
&lt;p&gt;The Web UI was introduced in 2012 in Sidekiq 0.9 and used Sinatra for its framework along with Twitter Bootstrap for CSS.
Sidekiq 4.2 removed the Sinatra dependency (thanks @badosu!) and made the Web UI a plain Rack app with no framework.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Sidekiq 8.0</title>
      <link>https://www.mikeperham.com/2025/03/05/introducing-sidekiq-8.0/</link>
      <pubDate>Wed, 05 Mar 2025 12:09:25 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2025/03/05/introducing-sidekiq-8.0/</guid>
      <description>&lt;p&gt;After six months of hard work, I&amp;rsquo;m thrilled to announce the general availability of Sidekiq 8.0! ðŸ¥³ðŸŽ‰&lt;/p&gt;
&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;Sidekiq is used by thousands of Ruby applications around the world to scale job processing up to billions of jobs/day.
Current Sidekiq Enterprise customers are reporting a grand total of 1,806,671,058,604 jobs processed, almost two trillion, with my largest customer executing up to 250,000 jobs/sec.
Got a Ruby/Rails app and want to try out Sidekiq? See &lt;a href=&#34;#test-drive&#34;&gt;Test Drive&lt;/a&gt; to get started quickly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Conventional Commits</title>
      <link>https://www.mikeperham.com/2025/01/30/conventional-commits/</link>
      <pubDate>Thu, 30 Jan 2025 11:27:04 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2025/01/30/conventional-commits/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;Conventional Commits&lt;/a&gt; is a defacto standard for writing commit messages in a manner more useful for both humans and machines. Examples:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;feat(batches): adjust callback data model to conform to naming standards
ci: add ruby 3.4 to matrix
style: upgrade standard formatting
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I learned of conventional commits recently and like the simplicity and ease of use.
I want to use this standard going forward for all of my projects but I had one problem: how do I train myself to use this every time?
It&amp;rsquo;s too easy to forget or skip without some sort of prompt or cheatsheet so that&amp;rsquo;s exactly what I did!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sponsoring Hanami</title>
      <link>https://www.mikeperham.com/2025/01/17/sponsoring-hanami/</link>
      <pubDate>Fri, 17 Jan 2025 12:06:36 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2025/01/17/sponsoring-hanami/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m happy to announce a &lt;a href=&#34;https://opencollective.com/hanami&#34;&gt;substantial $12,000 grant&lt;/a&gt; to the &lt;a href=&#34;https://hanamirb.org&#34;&gt;Hanami&lt;/a&gt; framework.
I&amp;rsquo;ve been a massive believer in Open Source software since publishing my first open source project in 1995.
There&amp;rsquo;s nothing more empowering than direct access to the exact source code needed to solve a problem.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;But Ruby has a problem: it&amp;rsquo;s mostly a monoculture around Rails.
Merb and Sinatra provided valuable app framework options in the past, I believe we need new options for the future.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Iteration and Sidekiq 7.3.0</title>
      <link>https://www.mikeperham.com/2024/07/03/iteration-and-sidekiq-7.3.0/</link>
      <pubDate>Wed, 03 Jul 2024 09:00:00 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2024/07/03/iteration-and-sidekiq-7.3.0/</guid>
      <description>&lt;p&gt;Sidekiq is the most popular background job framework for Ruby and works really well if you follow the design guidelines: keep your jobs short and idempotent.
What happens if you have a job which processes a large amount of data serially, the infamous long-running job?
In that case, deployments can lead to the job failing mid-way because the job will not gracefully allow the Sidekiq process to restart.
To fix this, Sidekiq 7.3 just shipped with a major new feature: &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Iteration&#34;&gt;&lt;strong&gt;Iterable Jobs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis Licensing Changes and You</title>
      <link>https://www.mikeperham.com/2024/04/22/redis-licensing-changes-and-you/</link>
      <pubDate>Mon, 22 Apr 2024 08:53:20 -0700</pubDate>
      
      <guid>https://www.mikeperham.com/2024/04/22/redis-licensing-changes-and-you/</guid>
      <description>&lt;p&gt;A few weeks ago, the owners of Redis changed its licensing from BSD to a more limited source available license.
As far as I know this was done in order to prevent service providers from adding their own closed source, proprietary changes to their Redis service offerings.&lt;/p&gt;
&lt;p&gt;In principle I like this change.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; project uses the AGPL license for the same purpose: Faktory is open source and anyone who offers Faktory as a service &lt;strong&gt;with proprietary changes&lt;/strong&gt; should have to open source those changes too.
I consider this a valuable quid pro quo: if you change my open source to make money, you must contribute some of that value back to the community in return.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Serializing Ruby datatypes in JSON</title>
      <link>https://www.mikeperham.com/2024/03/01/serializing-ruby-datatypes-in-json/</link>
      <pubDate>Fri, 01 Mar 2024 09:42:08 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2024/03/01/serializing-ruby-datatypes-in-json/</guid>
      <description>&lt;p&gt;Ruby&amp;rsquo;s JSON library allows you to convert Ruby datatypes into a JSON document, as long as those types are native to JSON: String, bool, int, float, nil, Hash and Array.
Everything else converts to a String by default; if you use any other core datatypes, they will not survive a &lt;code&gt;JSON.generate/JSON.parse&lt;/code&gt; round trip. Here I pass a Range, Symbol and Time; notice how the end result is three Strings instead of the actual types:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How does Sidekiq work?</title>
      <link>https://www.mikeperham.com/2024/02/22/how-does-sidekiq-work/</link>
      <pubDate>Thu, 22 Feb 2024 10:59:46 -0800</pubDate>
      
      <guid>https://www.mikeperham.com/2024/02/22/how-does-sidekiq-work/</guid>
      <description>&lt;p&gt;A few weeks ago, I sat gobsmacked at my laptop reading one of the most impressive technical deep dives I&amp;rsquo;ve ever read.
Dan Svetlov wrote a blog post &amp;ldquo;How does Sidekiq really work?&amp;rdquo; on &lt;a href=&#34;https://dansvetlov.me&#34;&gt;his blog&lt;/a&gt; which delved deep into Sidekiq&amp;rsquo;s internals, explaining how it actually works.
The most impressive part of this blog post is that it was 100% accurate.
There were no mistakes or misunderstandings, Dan did the work and shows the receipts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How does Sidekiq work?</title>
      <link>https://www.mikeperham.com/how-sidekiq-works/</link>
      <pubDate>Sun, 04 Feb 2024 16:00:23 +0100</pubDate>
      
      <guid>https://www.mikeperham.com/how-sidekiq-works/</guid>
      <description>&lt;p&gt;2024-02-04&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article was originally published on &lt;a href=&#34;https://dansvetlov.me/sidekiq-internals/&#34;&gt;DanSvetlov.me&lt;/a&gt; and is republished here with permission of the author. This article is relevant to Sidekiq v7.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sidekiq/sidekiq&#34;&gt;Sidekiq&lt;/a&gt; is one of the most ubiquitous&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Ruby background job processors out there. To anybody who has worked with Ruby on and off Rails, it needs no introduction. Sidekiq has a 10+ year track record of being an efficient, battle-tested and simple-to-use solution for offloading the execution of application logic into the background.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
